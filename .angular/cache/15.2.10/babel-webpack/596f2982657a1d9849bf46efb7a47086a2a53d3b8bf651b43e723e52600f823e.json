{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { BehaviorSubject, share } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class NavService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n    this.currentUrl = new BehaviorSubject(undefined);\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.currentUrl.next(event.urlAfterRedirects);\n      }\n    });\n  }\n  postJsonData(data) {\n    this.videoDtls = this.http.post(`${this.baseUrl}/insertJsonData`, data).pipe(share());\n    return this.videoDtls;\n  }\n  getJsonData() {\n    this.vdDtls = this.http.get(`${this.baseUrl}/getJsonData`).pipe(share());\n    return this.vdDtls;\n  }\n  postUpdateJsonData(data) {\n    this.videoDtls = this.http.post(`${this.baseUrl}/updateJsonData`, data).pipe(share());\n    return this.videoDtls;\n  }\n  postDeleteJsonData(data) {\n    this.videoDtls = this.http.post(`${this.baseUrl}/deleteJsonData`, data).pipe(share());\n    return this.videoDtls;\n  }\n  static #_ = this.ɵfac = function NavService_Factory(t) {\n    return new (t || NavService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavService,\n    factory: NavService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAgBA,aAAa,QAAgB,iBAAiB;AAC9D,SAASC,eAAe,EAAEC,KAAK,QAAQ,MAAM;;;;AAK7C,OAAM,MAAOC,UAAU;EAQnBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAPxC,YAAO,GAAG,uBAAuB;IAElC,eAAU,GAAG,IAAIL,eAAe,CAAMM,SAAS,CAAC;IAMnD,IAAI,CAACF,MAAM,CAACG,MAAM,CAACC,SAAS,CAAEC,KAAY,IAAI;MAC1C,IAAIA,KAAK,YAAYV,aAAa,EAAE;QAChC,IAAI,CAACW,UAAU,CAACC,IAAI,CAACF,KAAK,CAACG,iBAAiB,CAAC;;IAErD,CAAC,CAAC;EACN;EAGAC,YAAY,CAACC,IAAS;IAClB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,iBAAiB,EAAEH,IAAI,CAAC,CAACI,IAAI,CAACjB,KAAK,EAAE,CAAC;IAC1F,OAAO,IAAI,CAACc,SAAS;EACzB;EAEAI,WAAW;IACP,IAAI,CAACC,MAAM,GAAG,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAM,GAAG,IAAI,CAACJ,OAAO,cAAc,CAAC,CAACC,IAAI,CAACjB,KAAK,EAAE,CAAC;IAC7E,OAAO,IAAI,CAACmB,MAAM;EACtB;EAEAE,kBAAkB,CAACR,IAAS;IACxB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,iBAAiB,EAAEH,IAAI,CAAC,CAACI,IAAI,CAACjB,KAAK,EAAE,CAAC;IAC1F,OAAO,IAAI,CAACc,SAAS;EACzB;EAEAQ,kBAAkB,CAACT,IAAS;IACxB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,iBAAiB,EAAEH,IAAI,CAAC,CAACI,IAAI,CAACjB,KAAK,EAAE,CAAC;IAC1F,OAAO,IAAI,CAACc,SAAS;EACzB;EAAC;qBAnCQb,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAsB,SAAVtB,UAAU;IAAAuB,YADG;EAAM","names":["NavigationEnd","BehaviorSubject","share","NavService","constructor","router","http","undefined","events","subscribe","event","currentUrl","next","urlAfterRedirects","postJsonData","data","videoDtls","post","baseUrl","pipe","getJsonData","vdDtls","get","postUpdateJsonData","postDeleteJsonData","factory","providedIn"],"sourceRoot":"","sources":["D:\\sru\\mywork\\sitemate_task\\src\\app\\services\\nav.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Event, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, share } from 'rxjs';\r\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NavService {\r\n    private baseUrl = 'http://localhost:8080';\r\n    public plyVd: any;\r\n    public currentUrl = new BehaviorSubject<any>(undefined);\r\n    loginDtls: Observable<any>;\r\n    videoDtls: Observable<any>;\r\n    vdDtls: Observable<any>;\r\n\r\n    constructor(private router: Router, private http: HttpClient) {\r\n        this.router.events.subscribe((event: Event) => {\r\n            if (event instanceof NavigationEnd) {\r\n                this.currentUrl.next(event.urlAfterRedirects);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    postJsonData(data: any): Observable<any> {\r\n        this.videoDtls = this.http.post<any>(`${this.baseUrl}/insertJsonData`, data).pipe(share());\r\n        return this.videoDtls;\r\n    }\r\n\r\n    getJsonData(): Observable<any> {\r\n        this.vdDtls = this.http.get<any>(`${this.baseUrl}/getJsonData`).pipe(share());\r\n        return this.vdDtls;\r\n    }\r\n\r\n    postUpdateJsonData(data: any): Observable<any> {\r\n        this.videoDtls = this.http.post<any>(`${this.baseUrl}/updateJsonData`, data).pipe(share());\r\n        return this.videoDtls;\r\n    }\r\n\r\n    postDeleteJsonData(data: any): Observable<any> {\r\n        this.videoDtls = this.http.post<any>(`${this.baseUrl}/deleteJsonData`, data).pipe(share());\r\n        return this.videoDtls;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}