{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(next, state) {\n    console.log(state);\n    console.log(\"--------state--------\");\n    const loggedIn = false; // or false get you logged in status from state  \n    if (loggedIn) {\n      return true;\n    }\n    this.router.navigate([\"/authentication/login\"]);\n    return false;\n  }\n  canActivateChild(next, state) {\n    return this.canActivate(next, state);\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc;IAAd,WAAM,GAANA,MAAM;EAClB;EACAC,WAAW,CACPC,IAA4B,EAC5BC,KAA0B;IAC1BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAMC,QAAQ,GAAG,KAAK,CAAC,CAAC;IACxB,IAAIA,QAAQ,EAAE;MACV,OAAO,IAAI;;IAEf,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,uBAAuB,CAAC,CAAC;IAC/C,OAAO,KAAK;EAChB;EACAC,gBAAgB,CACZN,IAA4B,EAC5BC,KAA0B;IAC1B,OAAO,IAAI,CAACF,WAAW,CAACC,IAAI,EAAEC,KAAK,CAAC;EACxC;EAAC;qBApBQL,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAW,SAATX,SAAS;IAAAY,YAHN;EAAM","names":["AuthGuard","constructor","router","canActivate","next","state","console","log","loggedIn","navigate","canActivateChild","factory","providedIn"],"sourceRoot":"","sources":["D:\\sru\\mywork\\vidlocaleapp\\src\\app\\services\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from \"@angular/router\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AuthGuard {\r\n    constructor(\r\n        private router: Router) {\r\n    }\r\n    canActivate(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): boolean {\r\n        console.log(state);\r\n        console.log(\"--------state--------\");\r\n        const loggedIn = false; // or false get you logged in status from state  \r\n        if (loggedIn) {\r\n            return true;\r\n        }\r\n        this.router.navigate([\"/authentication/login\"]);\r\n        return false;\r\n    }\r\n    canActivateChild(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): boolean {\r\n        return this.canActivate(next, state);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}