{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/cdk/bidi\";\nimport * as i4 from \"@angular/material/sidenav\";\nimport * as i5 from \"./header/header.component\";\nconst _c0 = [\"leftsidenav\"];\nconst MOBILE_VIEW = 'screen and (max-width: 768px)';\nconst TABLET_VIEW = 'screen and (min-width: 769px) and (max-width: 1024px)';\nconst MONITOR_VIEW = 'screen and (min-width: 1024px)';\nexport class FullComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    //get options from service\n    this.layoutChangesSubscription = Subscription.EMPTY;\n    this.isMobileScreen = false;\n    this.isContentWidthFixed = true;\n    this.isCollapsedWidthFixed = false;\n    this.htmlElement = document.querySelector('html');\n    this.layoutChangesSubscription = this.breakpointObserver.observe([MOBILE_VIEW, TABLET_VIEW, MONITOR_VIEW]).subscribe(state => {\n      // SidenavOpened must be reset true when layout changes\n      this.isMobileScreen = state.breakpoints[MOBILE_VIEW];\n      this.isContentWidthFixed = state.breakpoints[MONITOR_VIEW];\n    });\n  }\n  get isOver() {\n    return this.isMobileScreen;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.layoutChangesSubscription.unsubscribe();\n  }\n  toggleCollapsed() {\n    this.isContentWidthFixed = false;\n  }\n  onSidenavClosedStart() {\n    this.isContentWidthFixed = false;\n  }\n  onSidenavOpenedChange(isOpened) {\n    this.isCollapsedWidthFixed = this.isOver;\n  }\n  static #_ = this.ɵfac = function FullComponent_Factory(t) {\n    return new (t || FullComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FullComponent,\n    selectors: [[\"app-full\"]],\n    viewQuery: function FullComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sidenav = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 3,\n    consts: [[\"autosize\", \"\", \"autoFocus\", \"\", \"dir\", \"ltr\", 1, \"mainWrapper\", \"blue_theme\", \"light-theme\"], [1, \"sidebarNav\", 3, \"mode\", \"opened\", \"openedChange\", \"closedStart\"], [1, \"contentWrapper\"], [3, \"showToggle\", \"toggleCollapsed\", \"toggleMobileNav\"], [1, \"pageWrapper\"]],\n    template: function FullComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0)(1, \"mat-sidenav\", 1);\n        i0.ɵɵlistener(\"openedChange\", function FullComponent_Template_mat_sidenav_openedChange_1_listener($event) {\n          return ctx.onSidenavOpenedChange($event);\n        })(\"closedStart\", function FullComponent_Template_mat_sidenav_closedStart_1_listener() {\n          return ctx.onSidenavClosedStart();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-sidenav-content\", 2)(3, \"app-header\", 3);\n        i0.ɵɵlistener(\"toggleCollapsed\", function FullComponent_Template_app_header_toggleCollapsed_3_listener() {\n          return ctx.toggleCollapsed();\n        })(\"toggleMobileNav\", function FullComponent_Template_app_header_toggleMobileNav_3_listener() {\n          return ctx.sidenav.toggle();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"main\", 4);\n        i0.ɵɵelement(5, \"router-outlet\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"mode\", ctx.isOver ? \"over\" : \"side\")(\"opened\", !ctx.isOver);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"showToggle\", !ctx.isOver);\n      }\n    },\n    dependencies: [i2.RouterOutlet, i3.Dir, i4.MatSidenav, i4.MatSidenavContainer, i4.MatSidenavContent, i5.HeaderComponent],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,YAAY,QAAQ,MAAM;;;;;;;;AAGnC,MAAMC,WAAW,GAAG,+BAA+B;AACnD,MAAMC,WAAW,GAAG,uDAAuD;AAC3E,MAAMC,YAAY,GAAG,gCAAgC;AAOrD,OAAM,MAAOC,aAAa;EAgBxBC,YAAoBC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IAXtC;IACQ,8BAAyB,GAAGN,YAAY,CAACO,KAAK;IAC9C,mBAAc,GAAG,KAAK;IACtB,wBAAmB,GAAG,IAAI;IAC1B,0BAAqB,GAAG,KAAK;IAQnC,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAE;IAClD,IAAI,CAACC,yBAAyB,GAAG,IAAI,CAACL,kBAAkB,CACrDM,OAAO,CAAC,CAACX,WAAW,EAAEC,WAAW,EAAEC,YAAY,CAAC,CAAC,CACjDU,SAAS,CAAEC,KAAK,IAAI;MACnB;MAEA,IAAI,CAACC,cAAc,GAAGD,KAAK,CAACE,WAAW,CAACf,WAAW,CAAC;MAEpD,IAAI,CAACgB,mBAAmB,GAAGH,KAAK,CAACE,WAAW,CAACb,YAAY,CAAC;IAC5D,CAAC,CAAC;EACN;EAfA,IAAIe,MAAM;IACR,OAAO,IAAI,CAACH,cAAc;EAC5B;EAeAI,QAAQ,IAAU;EAElBC,WAAW;IACT,IAAI,CAACT,yBAAyB,CAACU,WAAW,EAAE;EAC9C;EAEAC,eAAe;IACb,IAAI,CAACL,mBAAmB,GAAG,KAAK;EAClC;EAEAM,oBAAoB;IAClB,IAAI,CAACN,mBAAmB,GAAG,KAAK;EAClC;EAEAO,qBAAqB,CAACC,QAAiB;IACrC,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACR,MAAM;EAC1C;EAAC;qBA7CUd,aAAa;EAAA;EAAA;UAAbA,aAAa;IAAAuB;IAAAC;MAAA;;;;;;;;;;;;;QCd1BC,gDAKC;QAQGA;UAAA,OAAgBC,iCAA6B;QAAA,EAAC;UAAA,OAC/BA,0BAAsB;QAAA,EADS;QAKhDD,iBAAc;QAIdA,8CAA4C;QAOxCA;UAAA,OAAmBC,qBAAiB;QAAA,EAAC;UAAA,OAClBA,oBAAgB;QAAA,EADE;QAEtCD,iBAAa;QAEdA,+BAA0B;QAIxBA,gCAA+B;QACjCA,iBAAO;;;QA3BPA,eAAiC;QAAjCA,mDAAiC;QAiB/BA,eAAsB;QAAtBA,wCAAsB","names":["Subscription","MOBILE_VIEW","TABLET_VIEW","MONITOR_VIEW","FullComponent","constructor","breakpointObserver","EMPTY","htmlElement","document","querySelector","layoutChangesSubscription","observe","subscribe","state","isMobileScreen","breakpoints","isContentWidthFixed","isOver","ngOnInit","ngOnDestroy","unsubscribe","toggleCollapsed","onSidenavClosedStart","onSidenavOpenedChange","isOpened","isCollapsedWidthFixed","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["D:\\sru\\mywork\\modernize-angular-free-v1\\main\\src\\app\\layouts\\full\\full.component.ts","D:\\sru\\mywork\\modernize-angular-free-v1\\main\\src\\app\\layouts\\full\\full.component.html"],"sourcesContent":["import { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\n\r\nconst MOBILE_VIEW = 'screen and (max-width: 768px)';\r\nconst TABLET_VIEW = 'screen and (min-width: 769px) and (max-width: 1024px)';\r\nconst MONITOR_VIEW = 'screen and (min-width: 1024px)';\r\n\r\n@Component({\r\n  selector: 'app-full',\r\n  templateUrl: './full.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class FullComponent implements OnInit {\r\n\r\n  @ViewChild('leftsidenav')\r\n  public sidenav: MatSidenav;\r\n\r\n  //get options from service\r\n  private layoutChangesSubscription = Subscription.EMPTY;\r\n  private isMobileScreen = false;\r\n  private isContentWidthFixed = true;\r\n  private isCollapsedWidthFixed = false;\r\n  private htmlElement!: HTMLHtmlElement;\r\n\r\n  get isOver(): boolean {\r\n    return this.isMobileScreen;\r\n  }\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.htmlElement = document.querySelector('html')!;\r\n    this.layoutChangesSubscription = this.breakpointObserver\r\n      .observe([MOBILE_VIEW, TABLET_VIEW, MONITOR_VIEW])\r\n      .subscribe((state) => {\r\n        // SidenavOpened must be reset true when layout changes\r\n\r\n        this.isMobileScreen = state.breakpoints[MOBILE_VIEW];\r\n\r\n        this.isContentWidthFixed = state.breakpoints[MONITOR_VIEW];\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy() {\r\n    this.layoutChangesSubscription.unsubscribe();\r\n  }\r\n\r\n  toggleCollapsed() {\r\n    this.isContentWidthFixed = false;\r\n  }\r\n\r\n  onSidenavClosedStart() {\r\n    this.isContentWidthFixed = false;\r\n  }\r\n\r\n  onSidenavOpenedChange(isOpened: boolean) {\r\n    this.isCollapsedWidthFixed = this.isOver;\r\n  }\r\n}\r\n","<mat-sidenav-container\r\n  class=\"mainWrapper blue_theme  light-theme\"\r\n  autosize\r\n  autoFocus\r\n  dir=\"ltr\"\r\n>\r\n  <!-- ============================================================== -->\r\n  <!-- Vertical Sidebar -->\r\n  <!-- ============================================================== -->\r\n\r\n  <mat-sidenav\r\n    [mode]=\"isOver ? 'over' : 'side'\"\r\n    [opened]=\"!isOver\"\r\n    (openedChange)=\"onSidenavOpenedChange($event)\"\r\n    (closedStart)=\"onSidenavClosedStart()\"\r\n    class=\"sidebarNav\"\r\n  >\r\n    <!-- <app-sidebar></app-sidebar> -->\r\n  </mat-sidenav>\r\n  <!-- ============================================================== -->\r\n  <!-- Main Content -->\r\n  <!-- ============================================================== -->\r\n  <mat-sidenav-content class=\"contentWrapper\">\r\n    <!-- ============================================================== -->\r\n    <!-- VerticalHeader -->\r\n    <!-- ============================================================== -->\r\n\r\n    <app-header\r\n      [showToggle]=\"!isOver\"\r\n      (toggleCollapsed)=\"toggleCollapsed()\"\r\n      (toggleMobileNav)=\"sidenav.toggle()\"\r\n    ></app-header>\r\n\r\n    <main class=\"pageWrapper\">\r\n      <!-- ============================================================== -->\r\n      <!-- Outlet -->\r\n      <!-- ============================================================== -->\r\n      <router-outlet></router-outlet>\r\n    </main>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}