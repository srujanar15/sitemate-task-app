{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { BehaviorSubject, share } from 'rxjs';\nimport { HttpRequest } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class NavService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n    this.currentUrl = new BehaviorSubject(undefined);\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.currentUrl.next(event.urlAfterRedirects);\n      }\n    });\n  }\n  set setViewVd(val) {\n    this.plyVd = val;\n  }\n  get getVdData() {\n    return this.plyVd;\n  }\n  upload(file) {\n    const formData = new FormData();\n    formData.append('video', file);\n    const req = new HttpRequest('POST', `${this.baseUrl}/uploadVideo`, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n  }\n  getLoginDtls() {\n    this.loginDtls = this.http.get(`${this.baseUrl}/fetchValues`).pipe(share());\n    return this.loginDtls;\n  }\n  postJsonData(data) {\n    this.videoDtls = this.http.post(`${this.baseUrl}/insertJsonData`, data).pipe(share());\n    return this.videoDtls;\n  }\n  getJsonData() {\n    this.vdDtls = this.http.get(`${this.baseUrl}/getJsonData`).pipe(share());\n    return this.vdDtls;\n  }\n  static #_ = this.ɵfac = function NavService_Factory(t) {\n    return new (t || NavService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavService,\n    factory: NavService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAgBA,aAAa,QAAgB,iBAAiB;AAC9D,SAASC,eAAe,EAAEC,KAAK,QAAQ,MAAM;AAC7C,SAAqBC,WAAW,QAAmB,sBAAsB;;;;AAIzE,OAAM,MAAOC,UAAU;EAQnBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAPxC,YAAO,GAAG,uBAAuB;IAElC,eAAU,GAAG,IAAIN,eAAe,CAAMO,SAAS,CAAC;IAMnD,IAAI,CAACF,MAAM,CAACG,MAAM,CAACC,SAAS,CAAEC,KAAY,IAAI;MAC1C,IAAIA,KAAK,YAAYX,aAAa,EAAE;QAChC,IAAI,CAACY,UAAU,CAACC,IAAI,CAACF,KAAK,CAACG,iBAAiB,CAAC;;IAErD,CAAC,CAAC;EACN;EAEA,IAAWC,SAAS,CAACC,GAAQ;IACzB,IAAI,CAACC,KAAK,GAAGD,GAAG;EACpB;EAEA,IAAWE,SAAS;IAChB,OAAO,IAAI,CAACD,KAAK;EACrB;EAEAE,MAAM,CAACC,IAAS;IACZ,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE9B,MAAMI,GAAG,GAAG,IAAIrB,WAAW,CAAC,MAAM,EAAE,GAAG,IAAI,CAACsB,OAAO,cAAc,EAAEJ,QAAQ,EAAE;MACzEK,cAAc,EAAE,IAAI;MACpBC,YAAY,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACpB,IAAI,CAACqB,OAAO,CAACJ,GAAG,CAAC;EACjC;EAEAK,YAAY;IACR,IAAI,CAACC,SAAS,GAAG,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAAM,GAAG,IAAI,CAACN,OAAO,cAAc,CAAC,CAACO,IAAI,CAAC9B,KAAK,EAAE,CAAC;IAChF,OAAO,IAAI,CAAC4B,SAAS;EACzB;EAEAG,YAAY,CAACC,IAAS;IAClB,IAAI,CAACC,SAAS,GAAG,IAAI,CAAC5B,IAAI,CAAC6B,IAAI,CAAM,GAAG,IAAI,CAACX,OAAO,iBAAiB,EAAES,IAAI,CAAC,CAACF,IAAI,CAAC9B,KAAK,EAAE,CAAC;IAC1F,OAAO,IAAI,CAACiC,SAAS;EACzB;EAEAE,WAAW;IACP,IAAI,CAACC,MAAM,GAAG,IAAI,CAAC/B,IAAI,CAACwB,GAAG,CAAM,GAAG,IAAI,CAACN,OAAO,cAAc,CAAC,CAACO,IAAI,CAAC9B,KAAK,EAAE,CAAC;IAC7E,OAAO,IAAI,CAACoC,MAAM;EACtB;EAAC;qBAhDQlC,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAmC,SAAVnC,UAAU;IAAAoC,YADG;EAAM","names":["NavigationEnd","BehaviorSubject","share","HttpRequest","NavService","constructor","router","http","undefined","events","subscribe","event","currentUrl","next","urlAfterRedirects","setViewVd","val","plyVd","getVdData","upload","file","formData","FormData","append","req","baseUrl","reportProgress","responseType","request","getLoginDtls","loginDtls","get","pipe","postJsonData","data","videoDtls","post","getJsonData","vdDtls","factory","providedIn"],"sourceRoot":"","sources":["D:\\sru\\mywork\\vidlocaleapp - Copy\\src\\app\\services\\nav.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Event, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, share } from 'rxjs';\r\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NavService {\r\n    private baseUrl = 'http://localhost:8080';\r\n    public plyVd: any;\r\n    public currentUrl = new BehaviorSubject<any>(undefined);\r\n    loginDtls: Observable<any>;\r\n    videoDtls: Observable<any>;\r\n    vdDtls: Observable<any>;\r\n\r\n    constructor(private router: Router, private http: HttpClient) {\r\n        this.router.events.subscribe((event: Event) => {\r\n            if (event instanceof NavigationEnd) {\r\n                this.currentUrl.next(event.urlAfterRedirects);\r\n            }\r\n        });\r\n    }\r\n\r\n    public set setViewVd(val: any) {\r\n        this.plyVd = val;\r\n    }\r\n\r\n    public get getVdData() {\r\n        return this.plyVd;\r\n    }\r\n\r\n    upload(file: any): Observable<HttpEvent<any>> {\r\n        const formData = new FormData();\r\n        formData.append('video', file);\r\n\r\n        const req = new HttpRequest('POST', `${this.baseUrl}/uploadVideo`, formData, {\r\n            reportProgress: true,\r\n            responseType: 'json'\r\n        })\r\n        return this.http.request(req);\r\n    }\r\n\r\n    getLoginDtls(): Observable<any> {\r\n        this.loginDtls = this.http.get<any>(`${this.baseUrl}/fetchValues`).pipe(share());\r\n        return this.loginDtls;\r\n    }\r\n\r\n    postJsonData(data: any): Observable<any> {\r\n        this.videoDtls = this.http.post<any>(`${this.baseUrl}/insertJsonData`, data).pipe(share());\r\n        return this.videoDtls;\r\n    }\r\n\r\n    getJsonData(): Observable<any> {\r\n        this.vdDtls = this.http.get<any>(`${this.baseUrl}/getJsonData`).pipe(share());\r\n        return this.vdDtls;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}