{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class NavService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n    this.currentUrl = new BehaviorSubject(undefined);\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.currentUrl.next(event.urlAfterRedirects);\n      }\n    });\n  }\n  set setViewVd(val) {\n    this.plyVd = val;\n    console.log(this.plyVd);\n  }\n  get getVdData() {\n    return this.plyVd;\n  }\n  upload(file) {\n    const formData = new FormData();\n    formData.append('video', file);\n    console.log(`${this.baseUrl}/upload`);\n    // const req = new HttpRequest('POST', `${this.baseUrl}/upload`, formData, {\n    //   reportProgress: true,\n    //   responseType: 'json'\n    // });\n    // return this.http.request(req);\n  }\n  static #_ = this.ɵfac = function NavService_Factory(t) {\n    return new (t || NavService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavService,\n    factory: NavService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAgBA,aAAa,QAAgB,iBAAiB;AAC9D,SAASC,eAAe,QAAQ,MAAM;;;;AAKtC,OAAM,MAAOC,UAAU;EAKnBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAJxC,YAAO,GAAG,uBAAuB;IAElC,eAAU,GAAG,IAAIJ,eAAe,CAAMK,SAAS,CAAC;IAGnD,IAAI,CAACF,MAAM,CAACG,MAAM,CAACC,SAAS,CAAEC,KAAY,IAAI;MAC1C,IAAIA,KAAK,YAAYT,aAAa,EAAE;QAChC,IAAI,CAACU,UAAU,CAACC,IAAI,CAACF,KAAK,CAACG,iBAAiB,CAAC;;IAErD,CAAC,CAAC;EACN;EAEA,IAAWC,SAAS,CAACC,GAAQ;IACzB,IAAI,CAACC,KAAK,GAAGD,GAAG;IAChBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;EAC3B;EAEA,IAAWG,SAAS;IAChB,OAAO,IAAI,CAACH,KAAK;EACrB;EAEAI,MAAM,CAACC,IAAS;IACZ,MAAMC,QAAQ,GAAa,IAAIC,QAAQ,EAAE;IAEzCD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAC9BJ,OAAO,CAACC,GAAG,CAAC,GAAG,IAAI,CAACO,OAAO,SAAS,CAAC;IAErC;IACA;IACA;IACA;IAEA;EACJ;EAAC;qBAlCQtB,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAuB,SAAVvB,UAAU;IAAAwB,YADG;EAAM","names":["NavigationEnd","BehaviorSubject","NavService","constructor","router","http","undefined","events","subscribe","event","currentUrl","next","urlAfterRedirects","setViewVd","val","plyVd","console","log","getVdData","upload","file","formData","FormData","append","baseUrl","factory","providedIn"],"sourceRoot":"","sources":["D:\\sru\\mywork\\modernize-angular-free-v1\\main\\src\\app\\services\\nav.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Event, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NavService {\r\n    private baseUrl = 'http://localhost:8080';\r\n    public plyVd: any;\r\n    public currentUrl = new BehaviorSubject<any>(undefined);\r\n\r\n    constructor(private router: Router, private http: HttpClient) {\r\n        this.router.events.subscribe((event: Event) => {\r\n            if (event instanceof NavigationEnd) {\r\n                this.currentUrl.next(event.urlAfterRedirects);\r\n            }\r\n        });\r\n    }\r\n\r\n    public set setViewVd(val: any){\r\n        this.plyVd = val;\r\n        console.log(this.plyVd);\r\n    }\r\n\r\n    public get getVdData(){\r\n        return this.plyVd;\r\n    }\r\n\r\n    upload(file: any): Observable<HttpEvent<any>> {\r\n        const formData: FormData = new FormData();\r\n    \r\n        formData.append('video', file);\r\n        console.log(`${this.baseUrl}/upload`);\r\n        \r\n        // const req = new HttpRequest('POST', `${this.baseUrl}/upload`, formData, {\r\n        //   reportProgress: true,\r\n        //   responseType: 'json'\r\n        // });\r\n    \r\n        // return this.http.request(req);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}